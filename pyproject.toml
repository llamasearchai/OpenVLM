[build-system]
requires = ["setuptools>=61.0", "wheel", "build>=0.10.0"]
build-backend = "setuptools.build_meta"

[project]
name = "open-vlm"
dynamic = ["version"]
description = "OpenVLM: Pioneering Vision-Language Intelligence for Engineering."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT License"}
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
keywords = [
    "vision-language",
    "multimodal",
    "ai",
    "deep-learning",
    "computer-vision",
    "nlp",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Natural Language :: English",
    "Framework :: Pytest",
    "Typing :: Typed",
]
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "peft>=0.4.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pillow>=9.5.0",
    "tqdm>=4.65.0",
    "wandb>=0.15.0",
    "hydra-core>=1.3.0",
    "scikit-learn>=1.2.0",
    "matplotlib>=3.7.0",
    "opencv-python>=4.7.0",
    "sympy>=1.11.0",
    "ray[tune]>=2.4.0",
    "diffusers>=0.18.0",
    "PyYAML>=6.0",
]

[project.urls]
Documentation = "https://github.com/jina-ai/open-vlm/tree/main/docs"
"Source Code" = "https://github.com/jina-ai/open-vlm"
"Issue Tracker" = "https://github.com/jina-ai/open-vlm/issues"
PyPI = "https://pypi.org/project/open-vlm/"

[project.optional-dependencies]
spatial = [
    "pyrender>=0.1.45",
    "trimesh>=3.21.0",
]
diagram = [
    "pytesseract>=0.3.10",
    "easyocr>=1.7.0",
]
dev = [
    "pytest>=7.3.1",
    "black>=23.3.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "mypy>=1.0.0",
    "pylint>=2.17.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "tox>=4.0.0",
]
datasette = [
    "datasette>=0.64.0",
    "sqlite-utils>=3.30.0",
]
llm_integration = [
    "llm>=0.9",
]
api = [
    "fastapi>=0.100.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
    "aiohttp>=3.8.5",
]
docs = [
    "sphinx>=6.2.1",
    "sphinx-rtd-theme>=1.2.0",
    "sphinxcontrib-mermaid>=0.9.2",
]
full = [
    "open-vlm[spatial,diagram,dev,datasette,llm_integration,api,docs]",
]

[project.scripts]
open-vlm = "open_vlm.cli.main:main"

[tool.setuptools]
packages = ["open_vlm"]

[tool.setuptools.dynamic]
version = {attr = "open_vlm.__version__"}

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "setup"
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pylint]
max-line-length = 88
disable = [
    "missing-docstring",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-few-public-methods",
    "invalid-name",
]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "f", "T"]

[tool.pytest]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require a GPU",
]

[tool.coverage.run]
source = ["open_vlm"]
omit = [
    "open_vlm/__init__.py",
    "open_vlm/cli/__init__.py",
    "open_vlm/api/__init__.py",
    "open_vlm/utils/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.uv]
repository = "https://pypi.org/simple/"
resolution = "eager"
strict = true 